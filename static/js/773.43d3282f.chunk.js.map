{"version":3,"file":"static/js/773.43d3282f.chunk.js","mappings":"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","sources":["firebase.js","pages/List_Old.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\r\n// firestore를 불러오는 모듈을 임포트\r\nimport { getFirestore } from \"firebase/firestore\"\r\n\r\n// Firebase 구성 정보 설정\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_apiKey,\r\n    authDomain: process.env.REACT_APP_authDomain,\r\n    projectId: process.env.REACT_APP_projectId,\r\n    storageBucket: process.env.REACT_APP_storageBucket,\r\n    messagingSenderId: process.env.REACT_APP_messagingSenderId,\r\n    appId: process.env.REACT_APP_appId\r\n};\r\n\r\n  // Firebase 인스턴스 초기화\r\nconst app = initializeApp(firebaseConfig);\r\n\r\n// firestore 객체 생성\r\nconst db = getFirestore(app);\r\n// firestore export\r\nexport {db}","import { db } from '../firebase'; // Firebase 설정 및 연결\r\nimport { Buffer } from 'buffer'; // Buffer를 사용하여 Base64 데이터를 처리\r\nimport { query, orderBy, onSnapshot, collection } from 'firebase/firestore'; // Firestore 관련 함수들\r\nimport { useEffect, useState } from 'react'; // React hooks\r\nimport styled from 'styled-components'; // 스타일링을 위한 styled-components\r\nimport { jsPDF } from 'jspdf'; // PDF 생성 라이브러리\r\nimport html2canvas from 'html2canvas'; // HTML 영역을 캡처하기 위한 라이브러리\r\nimport ReactDOM from 'react-dom'; // ReactDOM 사용\r\n\r\n// 페이지 전체 Wrapper 스타일\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  background-color: #f9f9f9;\r\n  font-family: 'Noto Sans', sans-serif;\r\n  min-height: 100vh;\r\n  width: 100%;\r\n`;\r\n\r\n// 테이블 컨테이너 스타일\r\nconst TableContainer = styled.div`\r\n  width: 1050px;\r\n  max-width: 1200px;\r\n  background-color: #ffffff;\r\n  padding: 20px;\r\n  border-radius: 12px;\r\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n\r\n  @media (max-width: 768px) {\r\n    width: 80%;\r\n  }\r\n`;\r\n\r\n// 제목 스타일\r\nconst Title = styled.h1`\r\n  font-size: 2.5rem;\r\n  color: #333;\r\n  margin-bottom: 1rem;\r\n  text-align: center;\r\n\r\n  @media (max-width: 768px) {\r\n    font-size: 1.5rem;\r\n  }\r\n`;\r\n\r\n// 테이블 스타일\r\nconst StyledTable = styled.table`\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  font-size: 0.95rem;\r\n\r\n  @media (max-width: 768px) {\r\n    font-size: 0.6rem;\r\n  }\r\n`;\r\n\r\n// 테이블 행 스타일\r\nconst TableRow = styled.tr`\r\n  &:nth-child(even) {\r\n    background-color: #f8f8f8;\r\n  }\r\n`;\r\n\r\n// 테이블 데이터 셀 스타일\r\nconst TableCell = styled.td`\r\n  border: 1px solid black;\r\n  padding: 10px;\r\n  text-align: center;\r\n\r\n  @media (max-width: 768px) {\r\n    padding: 8px;\r\n  }\r\n`;\r\n\r\n// 테이블 헤더 스타일\r\nconst TableHeader = styled.th`\r\n  background-color: #c8c8c8;\r\n  border: 1px solid black;\r\n  color: black;\r\n  padding: 12px;\r\n  font-weight: bold;\r\n  text-align: center;\r\n\r\n  @media (max-width: 768px) {\r\n    padding: 10px;\r\n    font-size: 0.9rem;\r\n  }\r\n`;\r\n\r\n// PDF 다운로드 버튼 스타일\r\nconst DownloadButton = styled.button`\r\n  background-color: #4caf50;\r\n  color: white;\r\n  border: none;\r\n  padding: 12px 24px;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n  margin-bottom: 5px;\r\n\r\n  &:hover {\r\n    background-color: rgb(57, 126, 61);\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    padding: 10px 20px;\r\n    font-size: 0.9rem;\r\n  }\r\n`;\r\n\r\n// 로딩 메시지 스타일\r\nconst LoadingMessage = styled.div`\r\n  font-size: 1.2rem;\r\n  color: #666;\r\n  text-align: center;\r\n\r\n  @media (max-width: 768px) {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\nfunction List() {\r\n  const [data, setData] = useState([]); // 명부 데이터를 저장하는 상태\r\n  const [loading, setLoading] = useState(true); // 로딩 상태를 관리\r\n\r\n  // 컴포넌트가 처음 렌더링될 때 명부 데이터를 가져옴\r\n  useEffect(() => {\r\n    fetchList();\r\n  }, []);\r\n\r\n  // Firestore에서 데이터 가져오는 함수\r\n  const fetchList = () => {\r\n    const q = query(collection(db, 'List'), orderBy('time')); // 'List' 컬렉션에서 시간 순으로 정렬된 데이터 가져오기\r\n    onSnapshot(q, (snapshot) => {\r\n      const newData = snapshot.docs.map((doc) => {\r\n        const { sign, name, phone, add, birth } = doc.data();\r\n\r\n        // Base64 이미지를 Blob URL로 변환\r\n        const decodedURL = sign.replace(/^data:image\\/\\w+;base64,/, '');\r\n        const buf = Buffer.from(decodedURL, 'base64');\r\n        const blob = new Blob([buf], { type: 'image/png' });\r\n        const url = URL.createObjectURL(blob);\r\n\r\n        return { id: doc.id, name, phone, add, birth, sign: url };\r\n      });\r\n      setData(newData); // 변환된 데이터를 상태에 저장\r\n      setLoading(false); // 로딩 완료\r\n    });\r\n  };\r\n\r\n  // PDF 다운로드 함수\r\n  const downloadPDF = async () => {\r\n    const doc = new jsPDF({\r\n      orientation: 'portrait',\r\n      unit: 'mm',\r\n      format: 'a4',\r\n    });\r\n\r\n    // 데이터 분할: 첫 19개 행과 이후 20개씩 나눔\r\n    const chunkSize = 19;\r\n    let chunkedData = [];\r\n    let start = 0;\r\n\r\n    while (start < data.length) {\r\n      chunkedData.push(data.slice(start, start + chunkSize));\r\n      start += chunkSize;\r\n    }\r\n\r\n    // html2canvas로 TableContainer 캡처 후 PDF에 추가\r\n    for (let i = 0; i < chunkedData.length; i++) {\r\n      const containerId = `table-container-${i}`;\r\n\r\n      // TableContainer 렌더링\r\n      const tableContainer = document.createElement('div');\r\n      tableContainer.id = containerId;\r\n\r\n      // ReactPortal로 JSX 렌더링하기\r\n      ReactDOM.render(\r\n        <TableContainer id={containerId}>\r\n          <Title>탄원서 동의명부</Title>\r\n          <StyledTable>\r\n            <thead>\r\n              <tr>\r\n                <TableHeader>순번</TableHeader>\r\n                <TableHeader>성명</TableHeader>\r\n                <TableHeader>주소</TableHeader>\r\n                <TableHeader>생년월일</TableHeader>\r\n                <TableHeader>전화번호</TableHeader>\r\n                <TableHeader>서명</TableHeader>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {chunkedData[i].map((item, index) => (\r\n                <TableRow key={item.id}>\r\n                  <TableCell>{index + 1}</TableCell>\r\n                  <TableCell>{item.name}</TableCell>\r\n                  <TableCell>{item.add}</TableCell>\r\n                  <TableCell>{item.birth}</TableCell>\r\n                  <TableCell>{item.phone}</TableCell>\r\n                  <TableCell>\r\n                    <img src={item.sign} alt=\"서명\" width=\"50\" height=\"50\" />\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </tbody>\r\n          </StyledTable>\r\n        </TableContainer>,\r\n        tableContainer\r\n      );\r\n\r\n      // html2canvas로 캡처하여 PDF에 추가\r\n      await html2canvas(tableContainer, {\r\n        ignoreElements: (element) => {\r\n          return element.tagName === 'IFRAME'; // iframe을 무시\r\n        },\r\n        useCORS: true, // CORS 설정을 활성화하여 외부 콘텐츠를 캡처\r\n        allowTaint: true, // 이미지와 같은 비동기 리소스를 허용\r\n      }).then((canvas) => {\r\n        const imgData = canvas.toDataURL('image/png');\r\n        const imgProps = doc.getImageProperties(imgData);\r\n        const pdfWidth = doc.internal.pageSize.getWidth();\r\n        const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;\r\n\r\n        if (i > 0) doc.addPage(); // 첫 페이지가 아니면 새 페이지 추가\r\n        doc.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);\r\n      });\r\n\r\n      // 일시적으로 생성된 TableContainer 제거\r\n      ReactDOM.unmountComponentAtNode(tableContainer);\r\n    }\r\n\r\n    // PDF 저장\r\n    doc.save('탄원서_동의명부.pdf');\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      {/* PDF 다운로드 버튼 */}\r\n      <DownloadButton onClick={downloadPDF}>PDF로 다운로드</DownloadButton>\r\n\r\n      {/* 테이블 및 내용 */}\r\n      <TableContainer id=\"pdfContent\">\r\n        <Title>탄원서 동의명부</Title>\r\n        {loading ? (\r\n          <LoadingMessage>로딩 중입니다...</LoadingMessage>\r\n        ) : (\r\n          <StyledTable>\r\n            <thead>\r\n              <tr>\r\n                <TableHeader>순번</TableHeader>\r\n                <TableHeader>성명</TableHeader>\r\n                <TableHeader>주소</TableHeader>\r\n                <TableHeader>생년월일</TableHeader>\r\n                <TableHeader>전화번호</TableHeader>\r\n                <TableHeader>서명</TableHeader>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {data.length > 0 ? (\r\n                data.map((item, index) => (\r\n                  <TableRow key={item.id}>\r\n                    <TableCell>{index + 1}</TableCell>\r\n                    <TableCell>{item.name}</TableCell>\r\n                    <TableCell>{item.add}</TableCell>\r\n                    <TableCell>{item.birth}</TableCell>\r\n                    <TableCell>{item.phone}</TableCell>\r\n                    <TableCell>\r\n                      <img src={item.sign} alt=\"서명\" width=\"50\" height=\"50\" />\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))\r\n              ) : (\r\n                <TableRow>\r\n                  <TableCell colSpan=\"6\">작성된 명부가 없습니다.</TableCell>\r\n                </TableRow>\r\n              )}\r\n            </tbody>\r\n          </StyledTable>\r\n        )}\r\n      </TableContainer>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default List;\r\n"],"names":["app","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","Wrapper","styled","div","_templateObject","_taggedTemplateLiteral","TableContainer","_templateObject2","Title","h1","_templateObject3","StyledTable","table","_templateObject4","TableRow","tr","_templateObject5","TableCell","td","_templateObject6","TableHeader","th","_templateObject7","DownloadButton","button","_templateObject8","LoadingMessage","_templateObject9","data","setData","useState","loading","setLoading","useEffect","fetchList","q","query","collection","orderBy","onSnapshot","snapshot","newData","docs","map","doc","sign","name","phone","add","birth","decodedURL","replace","buf","Buffer","from","blob","Blob","type","url","URL","createObjectURL","id","_jsxs","children","_jsx","onClick","async","jsPDF","orientation","unit","format","chunkedData","start","length","push","slice","i","containerId","concat","tableContainer","document","createElement","ReactDOM","item","index","src","alt","width","height","html2canvas","ignoreElements","element","tagName","useCORS","allowTaint","then","canvas","imgData","toDataURL","imgProps","getImageProperties","pdfWidth","internal","pageSize","getWidth","pdfHeight","addPage","addImage","save","colSpan"],"sourceRoot":""}